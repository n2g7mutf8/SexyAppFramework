**THIS IS A DEV LOG FOR ALL WHO DECIDE TO EDIT THIS LIBRARY.  THIS WILL BE ADDED ON BY THE HEAD DEVELOPERS FOR INFORMATIONAL PURPOSES ONLY...**

Current fixes from Yalek:

9/2023 - 10/2023
*Update every piece of documentation to 2023 standards.  The only folder that is not modified yet is docs.  Will be adding to that soon.

*Add on 64 bit hooks from WINAPI by making a special call to long _stdcall with a macro known as "WINAPI64".  This similar documentation was used in the original win32 header files via winuser.h.  It hooked to 
int _stdcall...This means for the very first time you can finally use an extended address space in x86 by adding 64 bit code...

*^^Add on a 64 bit WindowProc method known as WindowProc64 that changes UINT to ULONG for the above reasons.  While putting the WINAPI64 as an #ifdef next to these functions (both WindowProc and WindowProc64).  
You MUST USE x86 still.  You cannot use the x64 config yet..

*^^Add on a 64 bit explicitly defined WinMain() method known as Win64Main.  This way you can use this in your project...

*Add on a .sln file for SexyAppBase.  We will not be doing the widestring variant yet, as we are still working on the original.  The name of the SexyAppBase VS2005 variants will be changed to SexyAppBase 
VS2022.vcxproj. The .vcproj's have been removed because we have the updated stuff already.  We are still keeping the WSTRING VS2005.vcproj.

*Update All file outputs to a unified folder based on *configuration*.  Separated by Debug and release.
11/2023:

CODING:

*Add a different pre-processor called "_HAS_STD_BYTE = 0".  If this is not defined in the debug and release configs
the std::byte and standalone "byte" typedefs in rpcndr and objidl and the base equivalent headers will clash with ambiguity...and cause 21 errors in SexyAppBase.cpp.*

*Add a SHIT ton of pixel formats and their functionalities in D3DInterface.cpp and its header (primarily expanding all 8 byte values to 32, and bitswapping for adding RGBA.)<< The methods look the same but what 
mattered was the *byte length*.  
*Ensure some files are NOT hidden, which were hidden in the SexyAppFramework folder...and is included directly within the solution.  The only files that MUST be hidden are the SWTri variants...
SWTri.cpp will include these by default...





Current fixes from n2g7mutf8:
7/2023 - 11/2023.  
CODING:

*removed wrong pointer usages, such as replacing NULL with nullptr to meet the new standards.  
^^Will also have to be done in the executable parts.  (As in the user must not use NULL, instead nullptr when initializing their constructs).  However, the user will still need to use the new and delete operators for initializing their interfaces.  (Board, Titlescreens, etc).  The nullptr just makes it safer since its newer and deletes actual pointers those very same objects when you do use delete/ new.  Even though most research doesnt recommend that...we are still finding a way to not do this anymore...

*Replace most (if not all) file IO methods with the _s "secure" methods instead of just standalones (with fopen_s, fread_s).  Uses different means of reading file IO to ensure to memory leaks are not prominenta anymore.

*Add on D3D9-11 adapter info methods.  This will replace the name of D3D8helper.h and cpp to just D3DHelper.h and cpp to generalize to all versions of D3D, so this way it makes more sense.  If he doesnt do this Yalek will most likely do the renaming...

*Update most files to c++20/17 and migrate almost all the stuff to VS2022 and latest builds.  

*Surpressed all warnings because those are annoying.  We only care about the errors.

*Fixed the extremely annoying d3d8caps error in the d3d8helper/d3dhelper.h/cpp files.  Otherwise we would have to include the DirectXSDK again and download the legacy D3D8caps.h...

*Reformatted Debug.cpp, DirectXErrorString files and might add some clang formatting down the road..

*Improved all image and font methods and removed some JPEG2000/J2K codec nonsense...
